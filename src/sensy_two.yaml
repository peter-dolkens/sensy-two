esphome:
  name: sensy-two
  friendly_name: Sensy Two 
  name_add_mac_suffix: True
  project: 
    name: Sensy-Two.S2 mmWave Sensor
    version: v0.0.1
    
  includes:
    - components/sensy_two/sensy_two_component.h

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf

external_components:
  - source:
      type: local
      path: components

wifi:
  ap:
    ssid: "I am Sensy!"
    ap_timeout: 1min

captive_portal:

esp32_improv:
  authorizer: none
  identify_duration: 10s
  wifi_timeout: 1min
  on_provisioned:
    then:
      - lambda: 'id(sensy_component)->read_firmware();'
      - delay: 500ms
      - lambda: 'id(sensy_component)->read_mac_address();'

api:

logger:
  level: ERROR
  # VERY_VERBOSE
#  logs:
#    wifi: ERROR
#    ms72sf1: VERY_VERBOSE
#    ms72sf1_uart: VERY_VERBOSE
#     esphome: DEBUG
#     default: ERROR
#    sensor: ERROR
#    text_sensor: ERROR
#     template: ERROR
#     uart: ERROR
#     mdns: ERROR
#     esphome.core: ERROR
#     esp32_ble: ERROR
#     esp32_ble_server: ERROR
#     esp32_improv: ERROR
#    captive_portal: ERROR
#    web_server: ERROR
#    api: ERROR
#    api.service: ERROR
#    esp32.preferences: ERROR
#    ota: ERROR
#    number: ERROR
#     ld2450: DEBUG

web_server:
  port: 80
  log: false

ota:
  platform: esphome

uart:
  id: ms72sf1
  baud_rate: 115200
  tx_pin: 17
  rx_pin: 16
  rx_buffer_size: 1024
  # debug:
  #   direction: BOTH
  #   dummy_receiver: false
  #   after:
  #     delimiter: "\n"
  #   sequence:
  #     - lambda: UARTDebug::log_string(direction, bytes);

sensy_two:
  id: sensy_component
  uart_id: ms72sf1
  t1_x:
    id: t1_x
    name: "Target 1 X Coordinate"
    unit_of_measurement: "cm"
    accuracy_decimals: 2
    icon: mdi:alpha-x-box-outline
  t1_y:
    id: t1_y
    name: "Target 1 Y Coordinate"
    unit_of_measurement: "cm"
    accuracy_decimals: 2
    icon: mdi:alpha-y-box-outline
  t1_z:
    id: t1_z
    name: "Target 1 Z Coordinate"
    unit_of_measurement: "cm"
    accuracy_decimals: 2
    icon: mdi:alpha-z-box-outline
  t1_angle:
    id: t1_angle
    name: "Target 1 Angle"
    unit_of_measurement: "Â°"
    accuracy_decimals: 2
    icon: mdi:format-text-rotation-angle-up
  t1_speed:
    id: t1_speed
    name: "Target 1 Speed"
    unit_of_measurement: "cm/s"
    icon: mdi:speedometer
  t1_distance_resolution:
    id: t1_distance_resolution
    name: "Target 1 Distance Resolution"
    unit_of_measurement: "cm"
    icon: mdi:diameter-outline
  t1_distance:
    id: t1_distance
    name: "Target 1 Distance"
    unit_of_measurement: "cm"
    accuracy_decimals: 2
    icon: mdi:map-marker-distance
  t2_x:
    id: t2_x
    name: "Target 2 X Coordinate"
    unit_of_measurement: "cm"
    accuracy_decimals: 2
    icon: mdi:alpha-x-box-outline
  t2_y:
    id: t2_y
    name: "Target 2 Y Coordinate"
    unit_of_measurement: "cm"
    accuracy_decimals: 2
    icon: mdi:alpha-y-box-outline
  t2_z:
    id: t2_z
    name: "Target 2 Z Coordinate"
    unit_of_measurement: "cm"
    accuracy_decimals: 2
    icon: mdi:alpha-z-box-outline
  t2_angle:
    id: t2_angle
    name: "Target 2 Angle"
    unit_of_measurement: "Â°"
    accuracy_decimals: 2
    icon: mdi:format-text-rotation-angle-up
  t2_speed:
    id: t2_speed
    name: "Target 2 Speed"
    unit_of_measurement: "cm/s"
    icon: mdi:speedometer
  t2_distance_resolution:
    id: t2_distance_resolution
    name: "Target 2 Distance Resolution"
    unit_of_measurement: "cm"
    icon: mdi:diameter-outline
  t2_distance:
    id: t2_distance
    name: "Target 2 Distance"
    unit_of_measurement: "cm"
    accuracy_decimals: 2
    icon: mdi:map-marker-distance
  t3_x:
    id: t3_x
    name: "Target 3 X Coordinate"
    unit_of_measurement: "cm"
    accuracy_decimals: 2
    icon: mdi:alpha-x-box-outline
  t3_y:
    id: t3_y
    name: "Target 3 Y Coordinate"
    unit_of_measurement: "cm"
    accuracy_decimals: 2
    icon: mdi:alpha-y-box-outline
  t3_z:
    id: t3_z
    name: "Target 3 Z Coordinate"
    unit_of_measurement: "cm"
    accuracy_decimals: 2
    icon: mdi:alpha-z-box-outline
  t3_angle:
    id: t3_angle
    name: "Target 3 Angle"
    unit_of_measurement: "Â°"
    accuracy_decimals: 2
    icon: mdi:format-text-rotation-angle-up
  t3_speed:
    id: t3_speed
    name: "Target 3 Speed"
    unit_of_measurement: "cm/s"
    icon: mdi:speedometer
  t3_distance_resolution:
    id: t3_distance_resolution
    name: "Target 3 Distance Resolution"
    unit_of_measurement: "cm"
    icon: mdi:diameter-outline
  t3_distance:
    id: t3_distance
    name: "Target 3 Distance"
    unit_of_measurement: "cm"
    accuracy_decimals: 2
    icon: mdi:map-marker-distance
  radar_firmware:
    id: radar_firmware
    name: "RADAR | Firmware"
    entity_category: diagnostic
  radar_mac:
    id: radar_mac
    name: "RADAR | MAC"
    entity_category: diagnostic

number:
  - platform: template
    id: zone1_x_begin
    name: "Zone 1 X Begin"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone1_x_end
    name: "Zone 1 X End"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone1_y_begin
    name: "Zone 1 Y Begin"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone1_y_end
    name: "Zone 1 Y End"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true

  - platform: template
    id: zone2_x_begin
    name: "Zone 2 X Begin"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone2_x_end
    name: "Zone 2 X End"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone2_y_begin
    name: "Zone 2 Y Begin"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone2_y_end
    name: "Zone 2 Y End"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true

  - platform: template
    id: zone3_x_begin
    name: "Zone 3 X Begin"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone3_x_end
    name: "Zone 3 X End"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone3_y_begin
    name: "Zone 3 Y Begin"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone3_y_end
    name: "Zone 3 Y End"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true

  - platform: template
    id: exclusion_x_begin
    name: "Exclusion X Begin"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: exclusion_x_end
    name: "Exclusion X End"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: exclusion_y_begin
    name: "Exclusion Y Begin"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: exclusion_y_end
    name: "Exclusion Y End"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true

  - platform: template
    id: detection_threshold
    name: "Detection Range"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
    on_value:
      then:
        - lambda: 'id(sensy_component)->set_detection_range_threshold(id(detection_threshold).state);'

button:
  - platform: template
    name: "RADAR | Restart Module"
    on_press:
      - lambda: 'id(sensy_component)->radar_restart();'
    entity_category: config
  - platform: template
    name: "RADAR | Capture Points"
    on_press:
      - lambda: 'id(sensy_component)->radar_capture();'
    entity_category: config

sensor:
  - platform: template
    name: "Zone 1 Targets"
    update_interval: 50000ms
    lambda: |-
      auto in_rect = [](float x,float y,float x0,float x1,float y0,float y1){
        float x_min = std::min(x0,x1);
        float x_max = std::max(x0,x1);
        float y_min = std::min(y0,y1);
        float y_max = std::max(y0,y1);
        return x >= x_min && x <= x_max && y >= y_min && y <= y_max;
      };
      auto ex = in_rect;
      float ex_x0=id(exclusion_x_begin).state;
      float ex_x1=id(exclusion_x_end).state;
      float ex_y0=id(exclusion_y_begin).state;
      float ex_y1=id(exclusion_y_end).state;
      int count=0;
      if(in_rect(id(t1_x).state,id(t1_y).state,id(zone1_x_begin).state,id(zone1_x_end).state,id(zone1_y_begin).state,id(zone1_y_end).state)
         && !ex(id(t1_x).state,id(t1_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      if(in_rect(id(t2_x).state,id(t2_y).state,id(zone1_x_begin).state,id(zone1_x_end).state,id(zone1_y_begin).state,id(zone1_y_end).state)
         && !ex(id(t2_x).state,id(t2_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      if(in_rect(id(t3_x).state,id(t3_y).state,id(zone1_x_begin).state,id(zone1_x_end).state,id(zone1_y_begin).state,id(zone1_y_end).state)
         && !ex(id(t3_x).state,id(t3_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      return count;

  - platform: template
    name: "Zone 1 Presence"
    update_interval: 50000ms
    lambda: |-
      auto in_rect = [](float x,float y,float x0,float x1,float y0,float y1){
        float x_min = std::min(x0,x1);
        float x_max = std::max(x0,x1);
        float y_min = std::min(y0,y1);
        float y_max = std::max(y0,y1);
        return x >= x_min && x <= x_max && y >= y_min && y <= y_max;
      };
      auto ex = in_rect;
      float ex_x0=id(exclusion_x_begin).state;
      float ex_x1=id(exclusion_x_end).state;
      float ex_y0=id(exclusion_y_begin).state;
      float ex_y1=id(exclusion_y_end).state;
      bool det=false;
      if(in_rect(id(t1_x).state,id(t1_y).state,id(zone1_x_begin).state,id(zone1_x_end).state,id(zone1_y_begin).state,id(zone1_y_end).state)
         && !ex(id(t1_x).state,id(t1_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      if(in_rect(id(t2_x).state,id(t2_y).state,id(zone1_x_begin).state,id(zone1_x_end).state,id(zone1_y_begin).state,id(zone1_y_end).state)
         && !ex(id(t2_x).state,id(t2_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      if(in_rect(id(t3_x).state,id(t3_y).state,id(zone1_x_begin).state,id(zone1_x_end).state,id(zone1_y_begin).state,id(zone1_y_end).state)
         && !ex(id(t3_x).state,id(t3_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      return det;

  - platform: template
    name: "Zone 2 Targets"
    update_interval: 50000ms
    lambda: |-
      auto in_rect = [](float x,float y,float x0,float x1,float y0,float y1){
        float x_min = std::min(x0,x1);
        float x_max = std::max(x0,x1);
        float y_min = std::min(y0,y1);
        float y_max = std::max(y0,y1);
        return x >= x_min && x <= x_max && y >= y_min && y <= y_max;
      };
      auto ex = in_rect;
      float ex_x0=id(exclusion_x_begin).state;
      float ex_x1=id(exclusion_x_end).state;
      float ex_y0=id(exclusion_y_begin).state;
      float ex_y1=id(exclusion_y_end).state;
      int count=0;
      if(in_rect(id(t1_x).state,id(t1_y).state,id(zone2_x_begin).state,id(zone2_x_end).state,id(zone2_y_begin).state,id(zone2_y_end).state)
         && !ex(id(t1_x).state,id(t1_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      if(in_rect(id(t2_x).state,id(t2_y).state,id(zone2_x_begin).state,id(zone2_x_end).state,id(zone2_y_begin).state,id(zone2_y_end).state)
         && !ex(id(t2_x).state,id(t2_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      if(in_rect(id(t3_x).state,id(t3_y).state,id(zone2_x_begin).state,id(zone2_x_end).state,id(zone2_y_begin).state,id(zone2_y_end).state)
         && !ex(id(t3_x).state,id(t3_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      return count;

  - platform: template
    name: "Zone 2 Presence"
    update_interval: 50000ms
    lambda: |-
      auto in_rect = [](float x,float y,float x0,float x1,float y0,float y1){
        float x_min = std::min(x0,x1);
        float x_max = std::max(x0,x1);
        float y_min = std::min(y0,y1);
        float y_max = std::max(y0,y1);
        return x >= x_min && x <= x_max && y >= y_min && y <= y_max;
      };
      auto ex = in_rect;
      float ex_x0=id(exclusion_x_begin).state;
      float ex_x1=id(exclusion_x_end).state;
      float ex_y0=id(exclusion_y_begin).state;
      float ex_y1=id(exclusion_y_end).state;
      bool det=false;
      if(in_rect(id(t1_x).state,id(t1_y).state,id(zone2_x_begin).state,id(zone2_x_end).state,id(zone2_y_begin).state,id(zone2_y_end).state)
         && !ex(id(t1_x).state,id(t1_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      if(in_rect(id(t2_x).state,id(t2_y).state,id(zone2_x_begin).state,id(zone2_x_end).state,id(zone2_y_begin).state,id(zone2_y_end).state)
         && !ex(id(t2_x).state,id(t2_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      if(in_rect(id(t3_x).state,id(t3_y).state,id(zone2_x_begin).state,id(zone2_x_end).state,id(zone2_y_begin).state,id(zone2_y_end).state)
         && !ex(id(t3_x).state,id(t3_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      return det;

  - platform: template
    name: "Zone 3 Targets"
    update_interval: 50000ms
    lambda: |-
      auto in_rect = [](float x,float y,float x0,float x1,float y0,float y1){
        float x_min = std::min(x0,x1);
        float x_max = std::max(x0,x1);
        float y_min = std::min(y0,y1);
        float y_max = std::max(y0,y1);
        return x >= x_min && x <= x_max && y >= y_min && y <= y_max;
      };
      auto ex = in_rect;
      float ex_x0=id(exclusion_x_begin).state;
      float ex_x1=id(exclusion_x_end).state;
      float ex_y0=id(exclusion_y_begin).state;
      float ex_y1=id(exclusion_y_end).state;
      int count=0;
      if(in_rect(id(t1_x).state,id(t1_y).state,id(zone3_x_begin).state,id(zone3_x_end).state,id(zone3_y_begin).state,id(zone3_y_end).state)
         && !ex(id(t1_x).state,id(t1_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      if(in_rect(id(t2_x).state,id(t2_y).state,id(zone3_x_begin).state,id(zone3_x_end).state,id(zone3_y_begin).state,id(zone3_y_end).state)
         && !ex(id(t2_x).state,id(t2_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      if(in_rect(id(t3_x).state,id(t3_y).state,id(zone3_x_begin).state,id(zone3_x_end).state,id(zone3_y_begin).state,id(zone3_y_end).state)
         && !ex(id(t3_x).state,id(t3_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      return count;

  - platform: template
    name: "Zone 3 Presence"
    update_interval: 50000ms
    lambda: |-
      auto in_rect = [](float x,float y,float x0,float x1,float y0,float y1){
        float x_min = std::min(x0,x1);
        float x_max = std::max(x0,x1);
        float y_min = std::min(y0,y1);
        float y_max = std::max(y0,y1);
        return x >= x_min && x <= x_max && y >= y_min && y <= y_max;
      };
      auto ex = in_rect;
      float ex_x0=id(exclusion_x_begin).state;
      float ex_x1=id(exclusion_x_end).state;
      float ex_y0=id(exclusion_y_begin).state;
      float ex_y1=id(exclusion_y_end).state;
      bool det=false;
      if(in_rect(id(t1_x).state,id(t1_y).state,id(zone3_x_begin).state,id(zone3_x_end).state,id(zone3_y_begin).state,id(zone3_y_end).state)
         && !ex(id(t1_x).state,id(t1_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      if(in_rect(id(t2_x).state,id(t2_y).state,id(zone3_x_begin).state,id(zone3_x_end).state,id(zone3_y_begin).state,id(zone3_y_end).state)
         && !ex(id(t2_x).state,id(t2_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      if(in_rect(id(t3_x).state,id(t3_y).state,id(zone3_x_begin).state,id(zone3_x_end).state,id(zone3_y_begin).state,id(zone3_y_end).state)
         && !ex(id(t3_x).state,id(t3_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      return det;



