esphome:
  name: sensy-two
  friendly_name: Sensy Two 
  name_add_mac_suffix: True
  project: 
    name: Sensy-Two.S2 mmWave Sensor
    version: v0.0.1
    
  includes:
    - components/sensy_two/sensy_two_component.h

esp32:
  board: esp32dev

external_components:
  - source:
      type: local
      path: components

wifi:
  ap:
    ssid: "I am Sensy!"
    ap_timeout: 1min

captive_portal:

esp32_improv:
  authorizer: none
  identify_duration: 10s
  wifi_timeout: 1min
  on_provisioned:
    then:
      - lambda: 'id(sensy_component)->read_firmware();'
      - delay: 500ms
      - lambda: 'id(sensy_component)->read_mac_address();'

api:

logger:
  level: VERY_VERBOSE

web_server:
  port: 80
  log: false

ota:
  platform: esphome

uart:
  id: sensy_uart
  baud_rate: 115200
  tx_pin: 17
  rx_pin: 16

sensy_two:
  id: sensy_component
  uart_id: sensy_uart
  t1_x:
    id: t1_x
  t1_y:
    id: t1_y
  t1_angle:
    id: t1_angle
  t1_speed:
    id: t1_speed
  t1_distance_resolution:
    id: t1_distance_resolution
  t1_distance:
    id: t1_distance
  t2_x:
    id: t2_x
  t2_y:
    id: t2_y
  t2_angle:
    id: t2_angle
  t2_speed:
    id: t2_speed
  t2_distance_resolution:
    id: t2_distance_resolution
  t2_distance:
    id: t2_distance
  t3_x:
    id: t3_x
  t3_y:
    id: t3_y
  t3_angle:
    id: t3_angle
  t3_speed:
    id: t3_speed
  t3_distance_resolution:
    id: t3_distance_resolution
  t3_distance:
    id: t3_distance
  radar_firmware:
    id: radar_firmware
    name: "RADAR | Firmware"
    entity_category: diagnostic
  radar_mac:
    id: radar_mac
    name: "RADAR | MAC"
    entity_category: diagnostic

number:
  - platform: template
    id: zone1_x_begin
    name: "Zone 1 X Begin"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone1_x_end
    name: "Zone 1 X End"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone1_y_begin
    name: "Zone 1 Y Begin"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone1_y_end
    name: "Zone 1 Y End"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true

  - platform: template
    id: zone2_x_begin
    name: "Zone 2 X Begin"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone2_x_end
    name: "Zone 2 X End"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone2_y_begin
    name: "Zone 2 Y Begin"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone2_y_end
    name: "Zone 2 Y End"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true

  - platform: template
    id: zone3_x_begin
    name: "Zone 3 X Begin"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone3_x_end
    name: "Zone 3 X End"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone3_y_begin
    name: "Zone 3 Y Begin"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: zone3_y_end
    name: "Zone 3 Y End"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true

  - platform: template
    id: exclusion_x_begin
    name: "Exclusion X Begin"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: exclusion_x_end
    name: "Exclusion X End"
    min_value: -600
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: exclusion_y_begin
    name: "Exclusion Y Begin"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
  - platform: template
    id: exclusion_y_end
    name: "Exclusion Y End"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true

  - platform: template
    id: detection_threshold
    name: "Detection Range"
    min_value: 0
    max_value: 600
    step: 1
    optimistic: true
    restore_value: true
    on_value:
      then:
        - lambda: 'id(sensy_component)->set_detection_range_threshold(id(detection_threshold).state);'

button:
  - platform: template
    name: "RADAR | Restart Module"
    on_press:
      - lambda: 'id(sensy_component)->restart_module();'
    entity_category: config
  - platform: template
    name: "RADAR | Reset Points"
    on_press:
      - lambda: 'id(sensy_component)->reset_points();'
    entity_category: config

sensor:
  - platform: template
    name: "Zone 1 Targets"
    update_interval: 500ms
    lambda: |-
      auto in_rect = [](float x,float y,float x0,float x1,float y0,float y1){
        float x_min = std::min(x0,x1);
        float x_max = std::max(x0,x1);
        float y_min = std::min(y0,y1);
        float y_max = std::max(y0,y1);
        return x >= x_min && x <= x_max && y >= y_min && y <= y_max;
      };
      auto ex = in_rect;
      float ex_x0=id(exclusion_x_begin).state;
      float ex_x1=id(exclusion_x_end).state;
      float ex_y0=id(exclusion_y_begin).state;
      float ex_y1=id(exclusion_y_end).state;
      int count=0;
      if(in_rect(id(t1_x).state,id(t1_y).state,id(zone1_x_begin).state,id(zone1_x_end).state,id(zone1_y_begin).state,id(zone1_y_end).state)
         && !ex(id(t1_x).state,id(t1_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      if(in_rect(id(t2_x).state,id(t2_y).state,id(zone1_x_begin).state,id(zone1_x_end).state,id(zone1_y_begin).state,id(zone1_y_end).state)
         && !ex(id(t2_x).state,id(t2_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      if(in_rect(id(t3_x).state,id(t3_y).state,id(zone1_x_begin).state,id(zone1_x_end).state,id(zone1_y_begin).state,id(zone1_y_end).state)
         && !ex(id(t3_x).state,id(t3_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      return count;

  - platform: template
    name: "Zone 1 Presence"
    update_interval: 500ms
    lambda: |-
      auto in_rect = [](float x,float y,float x0,float x1,float y0,float y1){
        float x_min = std::min(x0,x1);
        float x_max = std::max(x0,x1);
        float y_min = std::min(y0,y1);
        float y_max = std::max(y0,y1);
        return x >= x_min && x <= x_max && y >= y_min && y <= y_max;
      };
      auto ex = in_rect;
      float ex_x0=id(exclusion_x_begin).state;
      float ex_x1=id(exclusion_x_end).state;
      float ex_y0=id(exclusion_y_begin).state;
      float ex_y1=id(exclusion_y_end).state;
      bool det=false;
      if(in_rect(id(t1_x).state,id(t1_y).state,id(zone1_x_begin).state,id(zone1_x_end).state,id(zone1_y_begin).state,id(zone1_y_end).state)
         && !ex(id(t1_x).state,id(t1_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      if(in_rect(id(t2_x).state,id(t2_y).state,id(zone1_x_begin).state,id(zone1_x_end).state,id(zone1_y_begin).state,id(zone1_y_end).state)
         && !ex(id(t2_x).state,id(t2_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      if(in_rect(id(t3_x).state,id(t3_y).state,id(zone1_x_begin).state,id(zone1_x_end).state,id(zone1_y_begin).state,id(zone1_y_end).state)
         && !ex(id(t3_x).state,id(t3_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      return det;

  - platform: template
    name: "Zone 2 Targets"
    update_interval: 500ms
    lambda: |-
      auto in_rect = [](float x,float y,float x0,float x1,float y0,float y1){
        float x_min = std::min(x0,x1);
        float x_max = std::max(x0,x1);
        float y_min = std::min(y0,y1);
        float y_max = std::max(y0,y1);
        return x >= x_min && x <= x_max && y >= y_min && y <= y_max;
      };
      auto ex = in_rect;
      float ex_x0=id(exclusion_x_begin).state;
      float ex_x1=id(exclusion_x_end).state;
      float ex_y0=id(exclusion_y_begin).state;
      float ex_y1=id(exclusion_y_end).state;
      int count=0;
      if(in_rect(id(t1_x).state,id(t1_y).state,id(zone2_x_begin).state,id(zone2_x_end).state,id(zone2_y_begin).state,id(zone2_y_end).state)
         && !ex(id(t1_x).state,id(t1_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      if(in_rect(id(t2_x).state,id(t2_y).state,id(zone2_x_begin).state,id(zone2_x_end).state,id(zone2_y_begin).state,id(zone2_y_end).state)
         && !ex(id(t2_x).state,id(t2_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      if(in_rect(id(t3_x).state,id(t3_y).state,id(zone2_x_begin).state,id(zone2_x_end).state,id(zone2_y_begin).state,id(zone2_y_end).state)
         && !ex(id(t3_x).state,id(t3_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      return count;

  - platform: template
    name: "Zone 2 Presence"
    update_interval: 500ms
    lambda: |-
      auto in_rect = [](float x,float y,float x0,float x1,float y0,float y1){
        float x_min = std::min(x0,x1);
        float x_max = std::max(x0,x1);
        float y_min = std::min(y0,y1);
        float y_max = std::max(y0,y1);
        return x >= x_min && x <= x_max && y >= y_min && y <= y_max;
      };
      auto ex = in_rect;
      float ex_x0=id(exclusion_x_begin).state;
      float ex_x1=id(exclusion_x_end).state;
      float ex_y0=id(exclusion_y_begin).state;
      float ex_y1=id(exclusion_y_end).state;
      bool det=false;
      if(in_rect(id(t1_x).state,id(t1_y).state,id(zone2_x_begin).state,id(zone2_x_end).state,id(zone2_y_begin).state,id(zone2_y_end).state)
         && !ex(id(t1_x).state,id(t1_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      if(in_rect(id(t2_x).state,id(t2_y).state,id(zone2_x_begin).state,id(zone2_x_end).state,id(zone2_y_begin).state,id(zone2_y_end).state)
         && !ex(id(t2_x).state,id(t2_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      if(in_rect(id(t3_x).state,id(t3_y).state,id(zone2_x_begin).state,id(zone2_x_end).state,id(zone2_y_begin).state,id(zone2_y_end).state)
         && !ex(id(t3_x).state,id(t3_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      return det;

  - platform: template
    name: "Zone 3 Targets"
    update_interval: 500ms
    lambda: |-
      auto in_rect = [](float x,float y,float x0,float x1,float y0,float y1){
        float x_min = std::min(x0,x1);
        float x_max = std::max(x0,x1);
        float y_min = std::min(y0,y1);
        float y_max = std::max(y0,y1);
        return x >= x_min && x <= x_max && y >= y_min && y <= y_max;
      };
      auto ex = in_rect;
      float ex_x0=id(exclusion_x_begin).state;
      float ex_x1=id(exclusion_x_end).state;
      float ex_y0=id(exclusion_y_begin).state;
      float ex_y1=id(exclusion_y_end).state;
      int count=0;
      if(in_rect(id(t1_x).state,id(t1_y).state,id(zone3_x_begin).state,id(zone3_x_end).state,id(zone3_y_begin).state,id(zone3_y_end).state)
         && !ex(id(t1_x).state,id(t1_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      if(in_rect(id(t2_x).state,id(t2_y).state,id(zone3_x_begin).state,id(zone3_x_end).state,id(zone3_y_begin).state,id(zone3_y_end).state)
         && !ex(id(t2_x).state,id(t2_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      if(in_rect(id(t3_x).state,id(t3_y).state,id(zone3_x_begin).state,id(zone3_x_end).state,id(zone3_y_begin).state,id(zone3_y_end).state)
         && !ex(id(t3_x).state,id(t3_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) count++;
      return count;

  - platform: template
    name: "Zone 3 Presence"
    update_interval: 500ms
    lambda: |-
      auto in_rect = [](float x,float y,float x0,float x1,float y0,float y1){
        float x_min = std::min(x0,x1);
        float x_max = std::max(x0,x1);
        float y_min = std::min(y0,y1);
        float y_max = std::max(y0,y1);
        return x >= x_min && x <= x_max && y >= y_min && y <= y_max;
      };
      auto ex = in_rect;
      float ex_x0=id(exclusion_x_begin).state;
      float ex_x1=id(exclusion_x_end).state;
      float ex_y0=id(exclusion_y_begin).state;
      float ex_y1=id(exclusion_y_end).state;
      bool det=false;
      if(in_rect(id(t1_x).state,id(t1_y).state,id(zone3_x_begin).state,id(zone3_x_end).state,id(zone3_y_begin).state,id(zone3_y_end).state)
         && !ex(id(t1_x).state,id(t1_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      if(in_rect(id(t2_x).state,id(t2_y).state,id(zone3_x_begin).state,id(zone3_x_end).state,id(zone3_y_begin).state,id(zone3_y_end).state)
         && !ex(id(t2_x).state,id(t2_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      if(in_rect(id(t3_x).state,id(t3_y).state,id(zone3_x_begin).state,id(zone3_x_end).state,id(zone3_y_begin).state,id(zone3_y_end).state)
         && !ex(id(t3_x).state,id(t3_y).state,ex_x0,ex_x1,ex_y0,ex_y1)) det=true;
      return det;



